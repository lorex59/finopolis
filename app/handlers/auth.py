"""
–°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –§–ò–û ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –±–∞–Ω–∫.
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config import settings
from app.database import save_user

from app.database import get_all_users, get_user


router = Router(name="auth")


class AuthStates(StatesGroup):
    full_name = State()
    phone = State()
    bank = State()

@router.message(Command("start"))
async def cmd_start(msg: Message, state: FSMContext):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n\n–í–≤–µ–¥–∏ —Å–≤–æ—ë *–§–ò–û*:",
                     parse_mode="Markdown")
    await state.set_state(AuthStates.full_name)

@router.message(AuthStates.full_name, F.text.len() > 3)
async def process_name(msg: Message, state: FSMContext):
    await state.update_data(full_name=msg.text.strip())
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await msg.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=kb)
    await state.set_state(AuthStates.phone)


@router.message(AuthStates.phone, F.contact)
async def process_phone(msg: Message, state: FSMContext):
    await state.update_data(phone=msg.contact.phone_number)
    bank_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=bank)] for bank in settings.allowed_banks],
        resize_keyboard=True, one_time_keyboard=True
    )
    await msg.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –±–∞–Ω–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:",
                     reply_markup=bank_kb)
    await state.set_state(AuthStates.bank)


@router.message(AuthStates.bank, F.text.in_(settings.allowed_banks))
async def process_bank(msg: Message, state: FSMContext):
    data = await state.get_data()        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_id = msg.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
    if get_user(user_id) is None:
        # –î–∞–Ω–Ω—ã–µ –∏–∑ FSM + –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞
        data.update({"bank": msg.text})
        save_user(user_id, data)

    await msg.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await state.clear()



@router.message(Command("show_users"))
async def cmd_show_users(msg: Message):
    users = list(get_all_users())
    if not users:
        await msg.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    text = "<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    print(users)
    for user_id, user in users:
        text += (
            f"\nID: <code>{user_id}</code>\n"
            f"üë§ {user.get('full_name','?')}\n"
            f"üì± {user.get('phone','?')}\n"
            f"üè¶ {user.get('bank','?')}\n"
            "---"
        )
    await msg.answer(text, parse_mode="HTML")