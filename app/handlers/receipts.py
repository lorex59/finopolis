import io
import sqlite3
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from services.llm_api import extract_items_from_image
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–∫–µ—Ç–∞ ``app``. –≠—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç
# –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
# database.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤ –ø–æ–¥–ø–∞–∫–µ—Ç–µ ``app``. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
# –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ ``app.database``.
from app.database import (
    add_positions,
    get_positions,
    set_positions,
    init_assignments,
    set_assignment,
    get_assignments,
    start_text_session,
    append_text_message,
    end_text_session,
    get_all_users,
    save_debts,
    save_selected_positions,
    get_selected_positions,
)
from keyboards import positions_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from config import settings

from utils import parse_position

from app.database import get_user
from app.database import get_all_users, save_debts, log_payment

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–∞—Å—á—ë—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
from app.database import (
    add_payment,
    get_payments,
    calculate_group_balance,
    get_unassigned_positions,
)
from services.payments import mass_pay
from services.llm_api import calculate_debts_from_messages

router = Router(name="receipts")

class EditStates(StatesGroup):
    editing = State()
    adding = State()

# –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–∑–≤–∞—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–æ–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
# –ö–æ–º–∞–Ω–¥–∞ /split –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫¬ª –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏
# –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–æ–∑–∏—Ü–∏–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º
# —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ
# –∑–∞–≥—Ä—É–∑–∏–ª —á–µ–∫. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç, –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –æ–± —ç—Ç–æ–º.
@router.message(Command("split"))
async def cmd_split(msg: Message):
    group_id = str(msg.chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    positions = get_positions(group_id)
    if not positions:
        await msg.answer(
            "‚ùóÔ∏è–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é."
        )
        return
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.
        print(f"Type { msg.chat.type}")
        webapp_url = f"{settings.backend_url}/webapp/receipt?group_id={msg.chat.id}"
        # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å WebApp-–∫–Ω–æ–ø–∫—É –Ω–∞ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –í –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º deep‚Äëlink.
        if msg.chat.type == "private":
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫", web_app=WebAppInfo(url=webapp_url))]],
                resize_keyboard=True,
                one_time_keyboard=True,
                input_field_placeholder="–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            )
            await msg.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
                reply_markup=kb
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º deep‚Äëlink, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞
            if settings.bot_username:
                payload = f"group_{msg.chat.id}"
                deep_link = f"https://t.me/{settings.bot_username}?startapp={payload}"
                print(deep_link)
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫", url=deep_link)]]
                )
                await msg.answer(
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
                    reply_markup=kb
                )
            else:
                # –ë–µ–∑ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É WebApp
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫", url=webapp_url)]]
                )
                await msg.answer(
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
                    reply_markup=kb
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ WebApp: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")

# --- –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
# show_position: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏

@router.message(Command("show_position"))
async def cmd_show_position(msg: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç
    SELECTED_POSITIONS –∏–∑ database.py, –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ
    –≥—Ä—É–ø–ø—ã (chat.title). –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ
    —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º chat.id
    group_id = str(msg.chat.id)
    selections = get_selected_positions(group_id)
    if not selections:
        await msg.answer("‚ùóÔ∏è–ü–æ–∑–∏—Ü–∏–∏ –µ—â—ë –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        return
    lines: list[str] = ["<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π:</b>"]
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –µ–≥–æ –≤—ã–±–æ—Ä—É
    for user_id, pos_list in selections.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ ID)
        user_info = get_user(user_id) or {}
        name = user_info.get('full_name') or user_info.get('phone') or str(user_id)
        if pos_list:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π
            items_str = ", ".join([
                f"{p.get('name')} ({p.get('quantity')} √ó {p.get('price')}‚ÇΩ)"
                for p in pos_list
            ])
        else:
            items_str = "‚Äî"
        lines.append(f"{name} ({user_id}): {items_str}")
    await msg.answer("\n".join(lines), parse_mode="HTML")


@router.message(F.photo)
async def handle_photo(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ–∫–æ–≤. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    1. –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    2. –ü–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ –≤ LLM —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å `extract_items_from_image`.
    3. –ï—Å–ª–∏ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
       –ï—Å–ª–∏ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–≠—Ç–æ –Ω–µ —á–µ–∫¬ª) –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞,
       —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —ç—Ç–æ–º.
    """
    user = get_user(msg.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –±–æ—Ç
    # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç middleware, –Ω–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–µ—Å—å –µ—â—ë —Ä–∞–∑.
    if user is None:
        await msg.answer(
            "‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –ª–∏—á–∫—É –±–æ—Ç—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ –∏–∑ Telegram
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –æ—Ç Telegram
        telegram_photo = msg.photo[-1]
        file = await msg.bot.get_file(telegram_photo.file_id)
        file_bytes = await msg.bot.download_file(file.file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BytesIO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM
        image_bin = io.BytesIO(file_bytes.read())
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ LLM (OpenRouter) –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞
    try:
        items, _ = await extract_items_from_image(image_bin)
    except Exception as e:
        items = None

    # –ï—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫, —Å–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–µ–∫
    if not items or not isinstance(items, list):
        # –ï—Å–ª–∏ items ‚Äî —Å—Ç—Ä–æ–∫–∞, –≤—ã–≤–æ–¥–∏–º –µ—ë, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = str(items) if items else "–≠—Ç–æ –Ω–µ —á–µ–∫"
        print(f"LLM returned non-list response: {text}")
        await msg.answer(text)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —Ü–µ–Ω–æ–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    # –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –º–µ–Ω—å—à–µ, —á–µ–º
    # —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏).
    positions_to_add = [
        {"name": it.name, "quantity": it.quantity, "price": it.price}
        for it in items
    ]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã (—á–∞—Ç–∞) –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π
    group_id = str(msg.chat.id)
    add_positions(group_id, positions_to_add)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    chat_receipt_id = str(msg.chat.id)
    init_assignments(chat_receipt_id)

   
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    positions_text = "\n".join(
        f"{item['name']} ‚Äî {item['quantity']} x {item['price']}‚ÇΩ" for item in positions_to_add
        #f"{item.name} ‚Äî {item.quantity} x {item.price}‚ÇΩ" for item in items
    )
    await msg.answer(
        "‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + positions_text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # URL —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BACKEND_URL (settings.backend_url). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è,
    # —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ WebApp, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ–∫ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å
    # –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç –≤—ã–±–æ—Ä, –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    # Telegram.WebApp.sendData() —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∏ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –∏—Ö —á–µ—Ä–µ–∑ webapp_data_handler.
    try:
        # –ü–µ—Ä–µ–¥–∞—ë–º ID –≥—Ä—É–ø–ø—ã –≤ URL, —á—Ç–æ–±—ã –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–≥–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        webapp_url = f"{settings.backend_url}/webapp/receipt?group_id={msg.chat.id}"
        # –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏—à–∏ WebApp –Ω–∞ reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
        if msg.chat.type == "private":
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫", web_app=WebAppInfo(url=webapp_url))]],
                resize_keyboard=True,
                one_time_keyboard=True,
                input_field_placeholder="–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            )
            await msg.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
                reply_markup=kb
            )
        else:
            # –í –≥—Ä—É–ø–ø–∞—Ö reply‚Äë–∫–Ω–æ–ø–∫–∏ —Å WebApp –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º deep‚Äëlink.
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –∏–º—è –±–æ—Ç–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É startapp; –∏–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É WebApp –Ω–∞–ø—Ä—è–º—É—é.
            if settings.bot_username:
                payload = f"group_{msg.chat.id}"
                deep_link = f"https://t.me/{settings.bot_username}?startapp={payload}"
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫", url=deep_link)]]
                )
                await msg.answer(
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
                    reply_markup=kb
                )
            else:
                # –ï—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±‚Äë—Å—Ç—Ä–∞–Ω–∏—Ü—É
                link = webapp_url
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫", url=link)]]
                )
                await msg.answer(
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
                    reply_markup=kb
                )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ WebApp: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∏–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. Aiogram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
# –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä ``F.web_app_data``, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç
# ``Message`` —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ ``web_app_data``. –†–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å
# –ª—è–º–±–¥–∞‚Äë–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å ``getattr``, –æ–¥–Ω–∞–∫–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Aiogram –æ–Ω–æ
# –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –∏ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∏–∑‚Äë–∑–∞ —á–µ–≥–æ –¥–∞–Ω–Ω—ã–µ
# –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ç–∞—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è
# –Ω–∞–¥—ë–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
@router.message(F.web_app_data)
async def handle_web_app_data(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—Å—ã–ª–∞–µ–º—ã—Ö –∏–∑ WebApp. telegram.web_app_data.data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É JSON,
    –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    {"selected": [0, 3, 5]} –∏–ª–∏ {"selected": {index: quantity}} ‚Äî –∏–Ω–¥–µ–∫—Å—ã –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –≤ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø–æ –≥—Ä—É–ø–ø–µ.
    """
    try:
        import json
        # –î–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON. –°–Ω–∞—á–∞–ª–∞
        # —Ä–∞—Å–ø–∞—Ä—Å–∏–º –∏—Ö, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π. –í —Å–ª—É—á–∞–µ
        # –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        raw_data = msg.web_app_data.data
        print(f"Received web_app_data: {raw_data}")
        data = json.loads(raw_data)
        selected_data = data.get("selected", {})
        indices: list[int] = []
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏: —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ (—Å—Ç–∞—Ä—ã–π) –∏
        # —Å–ª–æ–≤–∞—Ä—å index ‚Üí quantity (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å). –î–ª—è —Å–ª–æ–≤–∞—Ä—è
        # —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤, —á—Ç–æ–±—ã –¥–∞–ª–µ–µ —Å—á–∏—Ç–∞—Ç—å
        # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.
        if isinstance(selected_data, dict):
            # –í —Å–ª–æ–≤–∞—Ä–µ qty –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä–æ–±–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ float
            for idx_str, qty in selected_data.items():
                try:
                    idx = int(idx_str)
                    q_raw = float(qty)
                except Exception:
                    continue
                # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º assignments
                # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å int(q_raw) —Ä–∞–∑. –î—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º,
                # —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ selected_positions.
                count = int(q_raw) if q_raw > 0 else 0
                for _ in range(count):
                    indices.append(idx)
        elif isinstance(selected_data, list):
            # –§–æ—Ä–º–∞—Ç {selected: [0,1,2]}
            for i in selected_data:
                try:
                    indices.append(int(i))
                except Exception:
                    pass
        else:
            indices = []
        print(f"Received indices from WebApp: {indices}")
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return
    # When the mini‚Äëapp is opened via a deep‚Äëlink in a group, the message
    # containing the selection is sent from the user's private chat. To
    # correctly associate the selection with the original group, we look
    # for a "group_id" field in the received data. If absent, fall back
    # to using the current chat ID (suitable for private chat usage).
    group_id = str(data.get("group_id") or msg.chat.id)
    receipt_id = group_id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ in‚Äëmemory assignments –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    set_assignment(receipt_id, msg.from_user.id, indices)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
        all_positions = get_positions(str(group_id))
        selected_positions: list[dict] = []
        if isinstance(selected_data, dict):
            for idx_str, qty in selected_data.items():
                try:
                    idx = int(idx_str)
                    q_raw = float(qty)
                except Exception:
                    continue
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if 0 <= idx < len(all_positions) and q_raw > 0:
                    orig = all_positions[idx]
                    selected_positions.append({
                        "name": orig.get("name"),
                        "quantity": q_raw,
                        "price": orig.get("price"),
                    })
        else:
            for idx in indices:
                if 0 <= idx < len(all_positions):
                    orig = all_positions[idx]
                    selected_positions.append({
                        "name": orig.get("name"),
                        "quantity": 1.0,
                        "price": orig.get("price"),
                    })
        save_selected_positions(str(group_id), msg.from_user.id, selected_positions)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
    await msg.answer(
        "‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–º–µ—Ç—è—Ç —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finalize –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞."
    )



@router.message(Command("show"))
async def show_positions(msg: Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, –∫—Ç–æ –∫–∞–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–±—Ä–∞–ª.
    group_id = str(msg.chat.id)
    positions = get_positions(group_id) or []
    if not positions:
        await msg.answer("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫–∏.")
        return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª
    from app.database import get_selected_positions as _get_selected_positions
    selections = _get_selected_positions(group_id) or {}
    # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á—É (name, price) ‚Üí —Å–ø–∏—Å–æ–∫ (user_name, quantity)
    selection_map: dict[tuple[str, float], list[tuple[str, float]]] = {}
    for uid, pos_list in selections.items():
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_info = get_user(uid) or {}
        user_name = user_info.get('full_name') or user_info.get('phone') or str(uid)
        for pos in pos_list:
            try:
                key = (pos.get('name'), float(pos.get('price', 0)))
                qty_raw = pos.get('quantity')
                qty = float(qty_raw) if qty_raw is not None else 0.0
            except Exception:
                continue
            selection_map.setdefault(key, []).append((user_name, qty))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
    lines: list[str] = []
    for idx, item in enumerate(positions):
        name = item.get('name')
        qty = item.get('quantity')
        price = item.get('price')
        lines.append(f"{idx+1}. {name} ‚Äî {qty} √ó {price}‚ÇΩ")
        key = (name, float(price) if price is not None else 0.0)
        participants = selection_map.get(key)
        if participants:
            parts = []
            for uname, q in participants:
                # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤
                try:
                    q_disp = round(float(q), 2)
                except Exception:
                    q_disp = q
                parts.append(f"{uname} √ó {q_disp}")
            lines.append("<i>–í—ã–±—Ä–∞–ª–∏: " + "; ".join(parts) + "</i>")
    kb = positions_keyboard(positions)
    await msg.answer("<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n" + "\n".join(lines), parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data.startswith("del_"))
async def delete_position(call: CallbackQuery):
    idx = int(call.data.replace("del_", ""))
    group_id = str(call.message.chat.id)
    positions = get_positions(group_id)
    if idx < 0 or idx >= len(positions):
        await call.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        return
    positions.pop(idx)
    set_positions(group_id, positions)
    await call.answer("–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–∑–∏—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
    # –∏–∑ enumerate –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–ª—é—á–∞–º
    # —Å–ª–æ–≤–∞—Ä—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ dict.
    text = "\n".join([
        f"{ix+1}. {p['name']} ‚Äî {p['quantity']} x {p['price']}‚ÇΩ"
        for ix, p in enumerate(positions)
    ])
    kb = positions_keyboard(positions)
    await call.message.edit_text(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π edit_ –∏ add_ –∫–æ–ª–ª–±—ç–∫–∏ (edit ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, add ‚Äî –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞)
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 1 (–∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥)
@router.callback_query(F.data.startswith("edit_"))
async def edit_position(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.replace("edit_", ""))
    group_id = str(call.message.chat.id)
    positions = get_positions(group_id)
    if 0 <= idx < len(positions):
        await state.update_data(edit_idx=idx)
        await state.set_state(EditStates.editing)
        await call.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ¬´{positions[idx]['name']}¬ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä:\n–ú–æ–ª–æ–∫–æ, 3, 75"
        )
        await call.answer()
    else:
        await call.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥)
@router.message(EditStates.editing)
async def save_edited_position(msg: Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get("edit_idx")
    try:
        position = parse_position(msg.text)
        group_id = str(msg.chat.id)
        positions = get_positions(group_id)
        positions[idx] = position
        set_positions(group_id, positions)
        await msg.answer("–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        kb = positions_keyboard(positions)
        text = "\n".join(
            f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
            for ix, i in enumerate(positions)
        )
        await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ 1 250")
    await state.clear()



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 1 (–∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥)
@router.callback_query(F.data == "add_new")
async def add_new_position(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditStates.adding)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞")
    await call.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥)
@router.message(EditStates.adding)
async def save_new_position(msg: Message, state: FSMContext):
    try:
        position = parse_position(msg.text)
        group_id = str(msg.chat.id)
        positions = get_positions(group_id)
        positions.append(position)
        set_positions(group_id, positions)
        await msg.answer("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        kb = positions_keyboard(positions)
        text = "\n".join(
            f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
            for ix, i in enumerate(positions)
        )
        await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: –ë–æ—Ä—â 2 350")
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) –≤—ã–∑—ã–≤–∞–µ—Ç /finalize –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π,
# –æ–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ä–∞–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
@router.message(Command("finalize"))
async def finalize_receipt(msg: Message):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏—Ä–∏–Ω–≥ –ø–æ —Ç–µ–∫—É—â–µ–º—É —á–µ–∫—É.

    –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—á—ë—Ç –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—è—Ö –∏
    –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≤–Ω—É –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    (—á–µ—Ä–µ–∑ LLM) –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è. –ò—Ç–æ–≥–æ–º —Ä–∞–±–æ—Ç—ã —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫
    –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
    —Å–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–≥–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
    debts –∏ –∂—É—Ä–Ω–∞–ª –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    group_id = str(msg.chat.id)
    receipt_id = group_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
    positions = get_positions(group_id) or []
    if not positions:
        await msg.answer("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.")
        return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏
    from app.database import get_selected_positions as _get_selected_positions, get_payments
    selections = _get_selected_positions(group_id) or {}
    payments = get_payments(group_id) or {}
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –Ω–∏ –ø–ª–∞—Ç–µ–∂–µ–π, —Ä–∞—Å—á—ë—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
    if not selections and not payments:
        await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–æ–º–∞–Ω–¥–æ–π /pay.")
        return
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏—Ä–∏–Ω–≥–∞
    transfers = calculate_group_balance(group_id) or []
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –¥–æ–ª–∂–Ω–∏–∫ ‚Üí —Å—É–º–º–∞
    debt_mapping: dict[int, float] = {}
    for debtor_id, creditor_id, amount in transfers:
        # –°—É–º–º–∏—Ä—É–µ–º –¥–æ–ª–≥ –¥–æ–ª–∂–Ω–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞–º
        debt_mapping[debtor_id] = round(debt_mapping.get(debtor_id, 0.0) + float(amount), 2)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ª–≥–∏ –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç—ë–∂ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    save_debts(receipt_id, debt_mapping)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∂—É—Ä–Ω–∞–ª. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ
    # –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–¥–µ—Å—å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.
    fake_tx_id = "manual_clear"
    log_payment(receipt_id, fake_tx_id, debt_mapping)
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤–∏–¥–∞ -100.... –ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Å—ã–ª–∫—É, —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100.
    group_link = ""
    try:
        chat_id_str = str(msg.chat.id)
        if chat_id_str.startswith("-100"):
            group_link = f"https://t.me/c/{chat_id_str[4:]}"
    except Exception:
        group_link = ""
    # –°—Ç—Ä–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –°–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ
    # –ø–µ—Ä–µ–≤–æ–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, –∫–æ–º—É –æ–Ω –¥–æ–ª–∂–µ–Ω –∏ –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –µ–º—É.
    user_transfers: dict[int, dict[str, list[tuple[int, float]]]] = {}
    for debtor_id, creditor_id, amount in transfers:
        user_transfers.setdefault(debtor_id, {"out": [], "in": []})
        user_transfers.setdefault(creditor_id, {"out": [], "in": []})
        user_transfers[debtor_id]["out"].append((creditor_id, float(amount)))
        user_transfers[creditor_id]["in"].append((debtor_id, float(amount)))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for uid, flows in user_transfers.items():
        messages: list[str] = []
        outgoing = flows.get("out", [])
        incoming = flows.get("in", [])
        for creditor_id, amount in outgoing:
            creditor_info = get_user(creditor_id) or {}
            creditor_name = creditor_info.get('full_name') or creditor_info.get('phone') or str(creditor_id)
            messages.append(f"–í—ã –¥–æ–ª–∂–Ω—ã {amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {creditor_name}.")
        for debtor_id, amount in incoming:
            debtor_info = get_user(debtor_id) or {}
            debtor_name = debtor_info.get('full_name') or debtor_info.get('phone') or str(debtor_id)
            messages.append(f"{debtor_name} –¥–æ–ª–∂–µ–Ω –≤–∞–º {amount}‚ÇΩ.")
        if not messages:
            messages.append("–í–∞—à –±–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π. –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.")
        if group_link:
            messages.append(f"–ì—Ä—É–ø–ø–∞: {group_link}")
        try:
            await msg.bot.send_message(uid, "\n".join(messages))
        except Exception:
            pass
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    summary_lines: list[str] = ["üí∞ –ö–ª–∏—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!"]
    if transfers:
        summary_lines.append("\n<b>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:</b>")
        for debtor_id, creditor_id, amount in transfers:
            debtor_info = get_user(debtor_id) or {}
            creditor_info = get_user(creditor_id) or {}
            debtor_name = debtor_info.get('full_name') or debtor_info.get('phone') or str(debtor_id)
            creditor_name = creditor_info.get('full_name') or creditor_info.get('phone') or str(creditor_id)
            summary_lines.append(f"{debtor_name} ‚Üí {creditor_name}: {amount}‚ÇΩ")
        summary_lines.append("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    else:
        summary_lines.append("\n–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã. –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.")
    await msg.answer("\n".join(summary_lines), parse_mode="HTML")
    # –û—á–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å—á—ë—Ç –±—ã–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º
    set_positions(group_id, [])


# ---------------------------------------------------------------------------
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á—ë—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–∞—Å—á—ë—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
# ---------------------------------------------------------------------------

@router.message(Command("pay"))
async def cmd_pay(msg: Message):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
      /pay <—Å—É–º–º–∞> [–æ–ø–∏—Å–∞–Ω–∏–µ]

    –ü—Ä–∏–º–µ—Ä: /pay 1500 –û–±–µ–¥ –∏ –Ω–∞–ø–∏—Ç–∫–∏

    –°—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ—á–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–∞—è).
    –û–ø–∏—Å–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç.
    """
    group_id = str(msg.chat.id)
    user_id = msg.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if get_user(user_id) is None:
        await msg.answer(
            "‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ –ª–∏—á–∫—É –±–æ—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    text = msg.text or ""
    parts = text.split(maxsplit=2)
    if len(parts) < 2:
        # –£–±–∏—Ä–∞–µ–º —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –æ—Ç Telegram
        await msg.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay —Å—É–º–º–∞ [–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π]"
        )
        return
    amount_str = parts[1].replace(",", ".")
    try:
        amount = float(amount_str)
    except Exception:
        await msg.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /pay 100.50")
        return
    description = parts[2] if len(parts) >= 3 else None
    try:
        add_payment(group_id, user_id, amount, description)
        await msg.answer(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@router.message(Command("unassigned"))
async def cmd_unassigned(msg: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —á–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –Ω–∏ –æ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.

    –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç—Ä–æ–∫–∏, –∏—Ö
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏–Ω–∞—á–µ –±–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    group_id = str(msg.chat.id)
    unassigned = get_unassigned_positions(group_id) or []
    if not unassigned:
        await msg.answer("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.")
        return
    lines: list[str] = ["<b>–ù–µ—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>"]
    for pos in unassigned:
        try:
            name = pos.get("name")
            qty = pos.get("quantity")
            price = pos.get("price")
            lines.append(f"{name} ({qty} √ó {price}‚ÇΩ)")
        except Exception:
            pass
    await msg.answer("\n".join(lines), parse_mode="HTML")


@router.message(Command("balance"))
async def cmd_balance(msg: Message):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.

    –ë–∞–ª–∞–Ω—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (selected_positions) –∏
    –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (payments). –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è,
    —Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ—Ç—Ä–∞—Ç–∏–ª –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º, —Å–∫–æ–ª—å–∫–æ –≤–Ω—ë—Å –ø–ª–∞—Ç–µ–∂–µ–π –∏
    –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å. –î–∞–ª–µ–µ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥—ã: –∫—Ç–æ, –∫–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ
    –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥–∏.
    """
    group_id = str(msg.chat.id)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    selections = get_selected_positions(group_id) or {}
    payments_map = get_payments(group_id) or {}
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö, –Ω–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    if not selections and not payments_map:
        await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –±–∞–ª–∞–Ω—Å–∞. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –≤–Ω–µ—Å–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–∏.")
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º cost_map: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí —Å—É–º–º–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    cost_map: dict[int, float] = {}
    for uid, pos_list in selections.items():
        total = 0.0
        for pos in pos_list:
            try:
                qty = float(pos.get("quantity", 0))
                price = float(pos.get("price", 0))
                total += qty * price
            except Exception:
                pass
        cost_map[uid] = round(total, 2)
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    users = set(cost_map.keys()) | set(payments_map.keys())
    # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ –∫–∞–∂–¥–æ–º—É
    lines: list[str] = ["<b>–ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã:</b>"]
    for uid in users:
        spent = cost_map.get(uid, 0.0)
        paid = payments_map.get(uid, 0.0)
        diff = round(paid - spent, 2)
        user_info = get_user(uid) or {}
        name = user_info.get('full_name') or user_info.get('phone') or str(uid)
        sign = "+" if diff >= 0 else ""
        lines.append(f"{name} ({uid}): –ø–æ—Ç—Ä–∞—Ç–∏–ª {spent}‚ÇΩ, –æ–ø–ª–∞—Ç–∏–ª {paid}‚ÇΩ ‚Üí –±–∞–ª–∞–Ω—Å {sign}{diff}‚ÇΩ")
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    transfers = calculate_group_balance(group_id)
    if transfers:
        lines.append("\n<b>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:</b>")
        for debtor_id, creditor_id, amount in transfers:
            debtor_info = get_user(debtor_id) or {}
            creditor_info = get_user(creditor_id) or {}
            debtor_name = debtor_info.get('full_name') or debtor_info.get('phone') or str(debtor_id)
            creditor_name = creditor_info.get('full_name') or creditor_info.get('phone') or str(creditor_id)
            lines.append(f"{debtor_name} ‚Üí {creditor_name}: {amount}‚ÇΩ")
    else:
        lines.append("\n–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã. –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.")
    await msg.answer("\n".join(lines), parse_mode="HTML")

# ---------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ---------------------------------------------------------------------------

def _format_rows(columns: list[str], rows: list[sqlite3.Row]) -> str:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏ –∏–∑ –ë–î –≤ —Å—Ç—Ä–æ–∫—É.

    Args:
        columns: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
        rows: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (sqlite3.Row)
    Returns:
        –ì–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ key: value;
        —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ ‚Äî –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏.
    """
    if not rows:
        return "(–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π)"
    lines: list[str] = []
    for row in rows:
        parts = []
        for col in columns:
            parts.append(f"{col}={row[col]}")
        lines.append(", ".join(parts))
    return "\n".join(lines)


@router.message(Command("accounts"))
async def cmd_show_accounts(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ accounts."""
    from app.database import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, phone_number, full_name, telegram_login, bank, telegram_id FROM accounts")
    rows = cur.fetchall()
    conn.close()
    columns = ["id", "phone_number", "full_name", "telegram_login", "bank", "telegram_id"]
    text = _format_rows(columns, rows)
    await msg.answer(f"<b>–¢–∞–±–ª–∏—Ü–∞ accounts:</b>\n{text}", parse_mode="HTML")


@router.message(Command("positions_db"))
async def cmd_show_positions_db(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã positions."""
    from app.database import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, group_id, name, quantity, price FROM positions ORDER BY id")
    rows = cur.fetchall()
    conn.close()
    columns = ["id", "group_id", "name", "quantity", "price"]
    text = _format_rows(columns, rows)
    await msg.answer(f"<b>–¢–∞–±–ª–∏—Ü–∞ positions:</b>\n{text}", parse_mode="HTML")


@router.message(Command("selected_positions_db"))
async def cmd_show_selected_positions_db(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã selected_positions."""
    from app.database import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, group_id, user_tg_id, position_id, quantity, price FROM selected_positions ORDER BY id")
    rows = cur.fetchall()
    conn.close()
    columns = ["id", "group_id", "user_tg_id", "position_id", "quantity", "price"]
    text = _format_rows(columns, rows)
    await msg.answer(f"<b>–¢–∞–±–ª–∏—Ü–∞ selected_positions:</b>\n{text}", parse_mode="HTML")


@router.message(Command("payments_db"))
async def cmd_show_payments_db(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã payments."""
    from app.database import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, tg_user_id, group_id, amount, positions FROM payments ORDER BY id")
    rows = cur.fetchall()
    conn.close()
    columns = ["id", "tg_user_id", "group_id", "amount", "positions"]
    text = _format_rows(columns, rows)
    await msg.answer(f"<b>–¢–∞–±–ª–∏—Ü–∞ payments:</b>\n{text}", parse_mode="HTML")


@router.message(Command("debts_db"))
async def cmd_show_debts_db(msg: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã debts."""
    from app.database import get_db_connection
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, receipt_id, user_tg_id, amount, created_at FROM debts ORDER BY id")
    rows = cur.fetchall()
    conn.close()
    columns = ["id", "receipt_id", "user_tg_id", "amount", "created_at"]
    text = _format_rows(columns, rows)
    await msg.answer(f"<b>–¢–∞–±–ª–∏—Ü–∞ debts:</b>\n{text}", parse_mode="HTML")
