import io
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from services.llm_api import extract_items_from_image
from database import add_positions, get_positions, set_positions
from keyboards import positions_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from config import settings

from utils import parse_position

from database import get_user
from database import get_all_users, save_debts
from services.payments import mass_pay

router = Router(name="receipts")

class EditStates(StatesGroup):
    editing = State()
    adding = State()


@router.message(F.photo)
async def handle_photo(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ–∫–æ–≤. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    1. –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    2. –ü–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ –≤ LLM —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å `extract_items_from_image`.
    3. –ï—Å–ª–∏ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
       –ï—Å–ª–∏ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–≠—Ç–æ –Ω–µ —á–µ–∫¬ª) –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞,
       —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —ç—Ç–æ–º.
    """
    user = get_user(msg.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –±–æ—Ç
    # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç middleware, –Ω–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–µ—Å—å –µ—â—ë —Ä–∞–∑.
    if user is None:
        await msg.answer(
            "‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –ª–∏—á–∫—É –±–æ—Ç—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ –∏–∑ Telegram
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –æ—Ç Telegram
        telegram_photo = msg.photo[-1]
        file = await msg.bot.get_file(telegram_photo.file_id)
        file_bytes = await msg.bot.download_file(file.file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BytesIO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM
        image_bin = io.BytesIO(file_bytes.read())
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ LLM (OpenRouter) –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞
    try:
        items, _ = await extract_items_from_image(image_bin)
        print("items", items)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–µ–∫–∞: {e}")
        items = None

    # –ï—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫, —Å–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–µ–∫
    if not items or not isinstance(items, list):
        # –ï—Å–ª–∏ items ‚Äî —Å—Ç—Ä–æ–∫–∞, –≤—ã–≤–æ–¥–∏–º –µ—ë, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = str(items) if items else "–≠—Ç–æ –Ω–µ —á–µ–∫"
        print(f"LLM returned non-list response: {text}")
        await msg.answer(text)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    add_positions(items)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    positions_text = "\n".join(
        #f"{item['name']} ‚Äî {item['quantity']} x {item['price']}‚ÇΩ" for item in items
        f"{item.name} ‚Äî {item.quantity} x {item.price}‚ÇΩ" for item in items
    )
    await msg.answer(
        "‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + positions_text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # URL —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BACKEND_URL (settings.backend_url). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è,
    # —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ WebApp, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ–∫ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å
    # –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç –≤—ã–±–æ—Ä, –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    # Telegram.WebApp.sendData() —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∏ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –∏—Ö —á–µ—Ä–µ–∑ webapp_data_handler.
    try:
        webapp_url = f"{settings.backend_url}/webapp/receipt"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫",
                        web_app=WebAppInfo(url=webapp_url)
                    )
                ]
            ]
        )
        await msg.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
            reply_markup=kb
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ WebApp: {e}")



@router.message(Command("show"))
async def show_positions(msg: Message):
    positions = get_positions()
    if not positions:
        await msg.answer("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫–∏.")
        return
    text = "\n".join([
        f"{idx+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
        for idx, i in enumerate(positions)
    ])
    kb = positions_keyboard(positions)
    await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data.startswith("del_"))
async def delete_position(call: CallbackQuery):
    idx = int(call.data.replace("del_", ""))
    positions = get_positions()
    if idx < 0 or idx >= len(positions):
        await call.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        return
    positions.pop(idx)
    set_positions(positions)
    await call.answer("–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
    text = "\n".join([
        f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
        for ix, i in enumerate(positions)
    ])
    kb = positions_keyboard(positions)
    await call.message.edit_text(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π edit_ –∏ add_ –∫–æ–ª–ª–±—ç–∫–∏ (edit ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, add ‚Äî –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞)
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 1 (–∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥)
@router.callback_query(F.data.startswith("edit_"))
async def edit_position(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.replace("edit_", ""))
    positions = get_positions()
    if 0 <= idx < len(positions):
        await state.update_data(edit_idx=idx)
        await state.set_state(EditStates.editing)
        await call.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ¬´{positions[idx]['name']}¬ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä:\n–ú–æ–ª–æ–∫–æ, 3, 75"
        )
        await call.answer()
    else:
        await call.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥)
@router.message(EditStates.editing)
async def save_edited_position(msg: Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get("edit_idx")
    try:
        position = parse_position(msg.text)
        positions = get_positions()
        positions[idx] = position
        set_positions(positions)
        await msg.answer("–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        kb = positions_keyboard(positions)
        text = "\n".join(
            f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
            for ix, i in enumerate(positions)
        )
        await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ 1 250")
    await state.clear()



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 1 (–∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥)
@router.callback_query(F.data == "add_new")
async def add_new_position(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditStates.adding)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞")
    await call.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥)
@router.message(EditStates.adding)
async def save_new_position(msg: Message, state: FSMContext):
    try:
        position = parse_position(msg.text)
        positions = get_positions()
        positions.append(position)
        set_positions(positions)
        await msg.answer("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        kb = positions_keyboard(positions)
        text = "\n".join(
            f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
            for ix, i in enumerate(positions)
        )
        await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: –ë–æ—Ä—â 2 350")
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) –≤—ã–∑—ã–≤–∞–µ—Ç /finalize –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π,
# –æ–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ä–∞–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
@router.message(Command("finalize"))
async def finalize_receipt(msg: Message):
    positions = get_positions()
    if not positions:
        await msg.answer("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.")
        return
    users = list(get_all_users())
    if not users:
        await msg.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")
        return

    # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ–∫–∞
    total_cost = 0.0
    for item in positions:
        try:
            total_cost += float(item.get("price", 0)) * float(item.get("quantity", 1))
        except Exception:
            pass
    # –î–µ–ª–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    count = len(users)
    share = total_cost / count if count else 0.0
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    mapping = {user_id: round(share, 2) for user_id, _ in users}

    # –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å (–∑–∞–≥–ª—É—à–∫–∞)
    tx_id = await mass_pay(mapping)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–≥–∞—Ö (receipt_id –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ UUID –∏–ª–∏ id —á–∞—Ç–∞)
    receipt_id = str(msg.chat.id)
    save_debts(receipt_id, mapping)
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    set_positions([])
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    text_lines = ["üí∞ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}"]
    text_lines.append("\n–°—É–º–º—ã –∫ –æ–ø–ª–∞—Ç–µ:")
    for user_id, amount in mapping.items():
        text_lines.append(f"<code>{user_id}</code> ‚Üí {amount}‚ÇΩ")
    await msg.answer("\n".join(text_lines), parse_mode="HTML")
