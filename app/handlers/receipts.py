import io
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from services.llm_api import extract_items_from_image
from database import (
    add_positions,
    get_positions,
    set_positions,
    init_assignments,
    set_assignment,
    get_assignments,
    start_text_session,
    append_text_message,
    end_text_session,
    get_all_users,
    save_debts,
)
from keyboards import positions_keyboard
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from config import settings

from utils import parse_position

from database import get_user
from database import get_all_users, save_debts, log_payment
from services.payments import mass_pay
from services.llm_api import calculate_debts_from_messages

router = Router(name="receipts")

class EditStates(StatesGroup):
    editing = State()
    adding = State()


@router.message(F.photo)
async def handle_photo(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —á–µ–∫–æ–≤. –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    1. –ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    2. –ü–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ –≤ LLM —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å `extract_items_from_image`.
    3. –ï—Å–ª–∏ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
       –ï—Å–ª–∏ LLM –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–≠—Ç–æ –Ω–µ —á–µ–∫¬ª) –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞,
       —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —ç—Ç–æ–º.
    """
    user = get_user(msg.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –±–æ—Ç
    # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç middleware, –Ω–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–µ—Å—å –µ—â—ë —Ä–∞–∑.
    if user is None:
        await msg.answer(
            "‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –ª–∏—á–∫—É –±–æ—Ç—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ –∏–∑ Telegram
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –æ—Ç Telegram
        telegram_photo = msg.photo[-1]
        file = await msg.bot.get_file(telegram_photo.file_id)
        file_bytes = await msg.bot.download_file(file.file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BytesIO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM
        image_bin = io.BytesIO(file_bytes.read())
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ LLM (OpenRouter) –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞
    try:
        items, _ = await extract_items_from_image(image_bin)
        print("items", items)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–µ–∫–∞: {e}")
        items = None

    # –ï—Å–ª–∏ LLM –≤–µ—Ä–Ω—É–ª –Ω–µ —Å–ø–∏—Å–æ–∫, —Å–æ–æ–±—â–∞–µ–º –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —á–µ–∫
    if not items or not isinstance(items, list):
        # –ï—Å–ª–∏ items ‚Äî —Å—Ç—Ä–æ–∫–∞, –≤—ã–≤–æ–¥–∏–º –µ—ë, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = str(items) if items else "–≠—Ç–æ –Ω–µ —á–µ–∫"
        print(f"LLM returned non-list response: {text}")
        await msg.answer(text)
        return
    print("Items extracted from image:", items)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    items = [
        {"name": item.name, "quantity": item.quantity, "price": item.price}
        for item in items
    ]

    add_positions(items)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    chat_receipt_id = str(msg.chat.id)
    init_assignments(chat_receipt_id)

   
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    positions_text = "\n".join(
        f"{item['name']} ‚Äî {item['quantity']} x {item['price']}‚ÇΩ" for item in items
        #f"{item.name} ‚Äî {item.quantity} x {item.price}‚ÇΩ" for item in items
    )
    await msg.answer(
        "‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + positions_text
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # URL —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BACKEND_URL (settings.backend_url). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è,
    # —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ WebApp, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —á–µ–∫ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å
    # –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç –≤—ã–±–æ—Ä, –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    # Telegram.WebApp.sendData() —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∏ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –∏—Ö —á–µ—Ä–µ–∑ webapp_data_handler.
    try:
        webapp_url = f"{settings.backend_url}/webapp/receipt"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üßæ –†–∞–∑–¥–µ–ª–∏—Ç—å —á–µ–∫",
                        web_app=WebAppInfo(url=webapp_url)
                    )
                ]
            ]
        )
        await msg.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫.",
            reply_markup=kb
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ WebApp: {e}")


@router.message(F.web_app_data)
async def handle_web_app_data(msg: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—Å—ã–ª–∞–µ–º—ã—Ö –∏–∑ WebApp. telegram.web_app_data.data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É JSON,
    –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    {"selected": [0, 3, 5]} ‚Äî –∏–Ω–¥–µ–∫—Å—ã –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –•—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –≤ –ë–î —á–µ—Ä–µ–∑ set_assignment().
    """
    try:
        import json
        data = json.loads(msg.web_app_data.data)
        selected_indices = data.get("selected", [])
        # –ü—Ä–∏–≤–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫ —Ü–µ–ª—ã–º —á–∏—Å–ª–∞–º
        indices = [int(i) for i in selected_indices]
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return
    receipt_id = str(msg.chat.id)
    set_assignment(receipt_id, msg.from_user.id, indices)
    await msg.answer("‚úÖ –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–º–µ—Ç—è—Ç —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finalize –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")



@router.message(Command("show"))
async def show_positions(msg: Message):
    positions = get_positions()
    if not positions:
        await msg.answer("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–µ–∫–∏.")
        return
    text = "\n".join([
        f"{idx+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
        for idx, i in enumerate(positions)
    ])
    kb = positions_keyboard(positions)
    await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)

@router.callback_query(F.data.startswith("del_"))
async def delete_position(call: CallbackQuery):
    idx = int(call.data.replace("del_", ""))
    positions = get_positions()
    if idx < 0 or idx >= len(positions):
        await call.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        return
    positions.pop(idx)
    set_positions(positions)
    await call.answer("–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
    text = "\n".join([
        #f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
        f"{idx+1}. {i.name} ‚Äî {i.quantity} x {i.price}‚ÇΩ"
        for ix, i in enumerate(positions)
    ])
    kb = positions_keyboard(positions)
    await call.message.edit_text(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π edit_ –∏ add_ –∫–æ–ª–ª–±—ç–∫–∏ (edit ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, add ‚Äî –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞)
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 1 (–∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥)
@router.callback_query(F.data.startswith("edit_"))
async def edit_position(call: CallbackQuery, state: FSMContext):
    idx = int(call.data.replace("edit_", ""))
    positions = get_positions()
    if 0 <= idx < len(positions):
        await state.update_data(edit_idx=idx)
        await state.set_state(EditStates.editing)
        await call.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è ¬´{positions[idx]['name']}¬ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä:\n–ú–æ–ª–æ–∫–æ, 3, 75"
        )
        await call.answer()
    else:
        await call.answer("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥)
@router.message(EditStates.editing)
async def save_edited_position(msg: Message, state: FSMContext):
    data = await state.get_data()
    idx = data.get("edit_idx")
    try:
        position = parse_position(msg.text)
        positions = get_positions()
        positions[idx] = position
        set_positions(positions)
        await msg.answer("–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        kb = positions_keyboard(positions)
        text = "\n".join(
            f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
            for ix, i in enumerate(positions)
        )
        await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ 1 250")
    await state.clear()



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 1 (–∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥)
@router.callback_query(F.data == "add_new")
async def add_new_position(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditStates.adding)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞")
    await call.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥)
@router.message(EditStates.adding)
async def save_new_position(msg: Message, state: FSMContext):
    try:
        position = parse_position(msg.text)
        positions = get_positions()
        positions.append(position)
        set_positions(positions)
        await msg.answer("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        kb = positions_keyboard(positions)
        text = "\n".join(
            f"{ix+1}. {i['name']} ‚Äî {i['quantity']} x {i['price']}‚ÇΩ"
            for ix, i in enumerate(positions)
        )
        await msg.answer(f"<b>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n{text}", parse_mode="HTML", reply_markup=kb)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü—Ä–∏–º–µ—Ä: –ë–æ—Ä—â 2 350")
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) –≤—ã–∑—ã–≤–∞–µ—Ç /finalize –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π,
# –æ–¥–Ω–∞–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Ä–∞–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
@router.message(Command("finalize"))
async def finalize_receipt(msg: Message):
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–µ–∫–∞.

    –ï—Å—Ç—å –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
      - –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ —Ä–∞—Å—Ö–æ–¥—ã
        —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (ASSIGNMENTS).
      - –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ LLM –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
      - –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –¥–µ–ª–∏–º —Å—É–º–º—É –ø–æ—Ä–æ–≤–Ω—É –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    """
    receipt_id = str(msg.chat.id)
    positions = get_positions()
    if not positions:
        await msg.answer("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.")
        return
    users = list(get_all_users())
    if not users:
        await msg.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞.")
        return

    # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω
    from database import TEXT_SESSIONS
    session = TEXT_SESSIONS.get(receipt_id)
    if session and not session.get("collecting") and session.get("messages"):
        # items for LLM: convert positions to dict{name: price}
        items_for_llm: dict[str, float] = {}
        for item in positions:
            try:
                total_price = float(item.get("price", 0)) * float(item.get("quantity", 1))
                items_for_llm[item.get("name")] = total_price
            except Exception:
                pass
        messages = session["messages"]
        try:
            debt_mapping = await calculate_debts_from_messages(items_for_llm, messages)
        except Exception as e:
            await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —á–µ—Ä–µ–∑ LLM: {e}\n–ü—Ä–æ–±—É–µ–º –ø–æ—Ä–æ–≤–Ω—É —Ä–∞–∑–¥–µ–ª–∏—Ç—å.")
            debt_mapping = None
        if isinstance(debt_mapping, dict):
            # –û–∫—Ä—É–≥–ª–∏—Ç—å –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–ª—é—á–∏ –∫ int
            mapping: dict[int, float] = {}
            for k, v in debt_mapping.items():
                try:
                    mapping[int(k)] = round(float(v), 2)
                except Exception:
                    pass
            if mapping:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
                tx_id = await mass_pay(mapping)
                save_debts(receipt_id, mapping)
                log_payment(receipt_id, tx_id, mapping)
                set_positions([])
                # –û—á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
                session["messages"] = []
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏—Ö —Å—É–º–º–æ–π
                for user_id, amount in mapping.items():
                    try:
                        # –ü–æ–∫–∞–∂–µ–º –∏–º—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                        user_info = get_user(user_id) or {}
                        name = user_info.get('full_name') or user_info.get('phone') or str(user_id)
                        await msg.bot.send_message(user_id, f"{name}, –≤—ã –¥–æ–ª–∂–Ω—ã {amount}‚ÇΩ. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
                    except Exception:
                        pass
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
                text_lines = ["üí∞ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}"]
                text_lines.append("\n–°—É–º–º—ã –∫ –æ–ø–ª–∞—Ç–µ:")
                for user_id, amount in mapping.items():
                    user_info = get_user(user_id) or {}
                    name = user_info.get('full_name') or user_info.get('phone') or str(user_id)
                    text_lines.append(f"{name} ({user_id}) ‚Üí {amount}‚ÇΩ")
                await msg.answer("\n".join(text_lines), parse_mode="HTML")
                return

    # 2. –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ WebApp
    assignments = get_assignments(receipt_id)
    if assignments:
        # –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        cost_per_position = []
        for item in positions:
            try:
                cost_per_position.append(float(item.get("price", 0)) * float(item.get("quantity", 1)))
            except Exception:
                cost_per_position.append(0.0)
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mapping: dict[int, float] = {user_id: 0.0 for user_id, _ in users}
        for user_id, indices in assignments.items():
            total = 0.0
            for idx in indices:
                if 0 <= idx < len(cost_per_position):
                    total += cost_per_position[idx]
            mapping[user_id] = round(total, 2)
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–ø–µ—Ä–≤—ã–π –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π —Ñ–æ—Ç–æ)
        payer_id = msg.from_user.id
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º mapping –≤ —Ñ–æ—Ä–º–∞—Ç "–∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –∫–æ–º—É –¥–æ–ª–∂–µ–Ω":
        # –≤—Å–µ –∫—Ä–æ–º–µ payer –¥–æ–ª–∂–Ω—ã payer
        debt_mapping: dict[int, float] = {}
        for uid, amount in mapping.items():
            if uid == payer_id:
                continue
            debt_mapping[uid] = amount
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
        tx_id = await mass_pay(debt_mapping)
        save_debts(receipt_id, debt_mapping)
        log_payment(receipt_id, tx_id, debt_mapping)
        set_positions([])
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ
        for uid, amount in debt_mapping.items():
            try:
                user_info = get_user(uid) or {}
                name = user_info.get('full_name') or user_info.get('phone') or str(uid)
                payer_info = get_user(payer_id) or {}
                payer_name = payer_info.get('full_name') or payer_info.get('phone') or str(payer_id)
                await msg.bot.send_message(uid, f"{name}, –≤—ã –¥–æ–ª–∂–Ω—ã {amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {payer_name}.")
            except Exception:
                pass
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∏–º–µ–Ω–∞–º–∏
        text_lines = ["üí∞ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}"]
        text_lines.append("\n–°—É–º–º—ã –∫ –æ–ø–ª–∞—Ç–µ:")
        for uid, amount in debt_mapping.items():
            user_info = get_user(uid) or {}
            name = user_info.get('full_name') or user_info.get('phone') or str(uid)
            text_lines.append(f"{name} ({uid}) ‚Üí {amount}‚ÇΩ")
        await msg.answer("\n".join(text_lines), parse_mode="HTML")
        return

    # 3. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–ª–∏–º —Å—É–º–º—É –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    total_cost = 0.0
    for item in positions:
        try:
            total_cost += float(item.get("price", 0)) * float(item.get("quantity", 1))
        except Exception:
            pass
    count = len(users)
    share = total_cost / count if count else 0.0
    mapping = {user_id: round(share, 2) for user_id, _ in users}
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
    tx_id = await mass_pay(mapping)
    save_debts(receipt_id, mapping)
    log_payment(receipt_id, tx_id, mapping)
    set_positions([])
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–∫—É: –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–º–º–µ, –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–µ–Ω
    for uid, amount in mapping.items():
        try:
            user_info = get_user(uid) or {}
            name = user_info.get('full_name') or user_info.get('phone') or str(uid)
            await msg.bot.send_message(uid, f"{name}, –≤—ã –¥–æ–ª–∂–Ω—ã {amount}‚ÇΩ (–ø–æ—Ä–æ–≤–Ω—É —Ä–∞–∑–¥–µ–ª–µ–Ω–æ).")
        except Exception:
            pass
    # –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–∞–º–∏
    text_lines = ["üí∞ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}"]
    text_lines.append("\n–°—É–º–º—ã –∫ –æ–ø–ª–∞—Ç–µ:")
    for user_id, amount in mapping.items():
        user_info = get_user(user_id) or {}
        name = user_info.get('full_name') or user_info.get('phone') or str(user_id)
        text_lines.append(f"{name} ({user_id}) ‚Üí {amount}‚ÇΩ")
    await msg.answer("\n".join(text_lines), parse_mode="HTML")
